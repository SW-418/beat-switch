// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  accounts  Account[]
}

model AccountType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      Service   @unique
  accounts  Account[]
}

model Account {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  accountId     String
  accountType   AccountType @relation(fields: [accountTypeId], references: [id])
  accountTypeId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  playlists     Playlist[]
}

model Song {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  name         String
  isrc         String
  album        String
  releaseDate  DateTime
  duration     Int
  hash         String        @unique
  artists      Artist[]
  songMappings SongMapping[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  Songs     Song[]
}

model SongMapping {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  originalPlaylist   Playlist         @relation("OriginalPlaylist", fields: [originalPlaylistId], references: [id])
  originalPlaylistId Int
  syncedPlaylist     Playlist?        @relation("SyncedPlaylist", fields: [syncedPlaylistId], references: [id])
  syncedPlaylistId   Int?
  song               Song             @relation(fields: [songId], references: [id])
  songId             Int
  addedAt            DateTime
  originalServiceId  String
  syncedServiceId    String?
  state              SongMappingState @default(READY_TO_MAP)
}

model Playlist {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  name          String
  account       Account           @relation(fields: [accountId], references: [id])
  accountId     Int
  originalSongs SongMapping[]     @relation("OriginalPlaylist")
  syncedSongs   SongMapping[]     @relation("SyncedPlaylist")
  status        PlaylistSyncState @default(SYNCING)
}

enum PlaylistSyncState {
  SYNCING
  SYNCED
  SYNC_FAILED
  MAPPING
  MAPPED
}

enum SongMappingState {
  READY_TO_MAP
  MAPPED
  MANUAL_MAPPING_REQUIRED
  SKIPPED
}

enum Service {
  SPOTIFY
  APPLE_MUSIC
}
